#!/bin/sh

# Part of @PACKAGE_STRING@
# For bug reports, see "@PACKAGE_BUGREPORT@"

# Variables set by the configure script:
MKTEMP="@MKTEMP@"
MKTEMP_TEMPLATE="@MKTEMP_TEMPLATE@"

_error ()
{
    # Simple function for outputting error messages.  Prefixes the error
    # message with the name of the utility.

    # Parameters:   same as printf
    # stdin:        unused
    # stdout:       unused
    # stderr:       error message

    printf 'shell: ' >&2

    # We mimic printf here, disable shellcheck test.
    # shellcheck disable=SC2059
    printf "$@" >&2
}

_get_solaris_shells ()
{
    # Returns a list of valid Solaris 11.4 shells.  The list is taken
    # from the shells(4) manual and is shortened to only contain one
    # single instance of each shell.

    # Parameters:   none
    # stdin:        unused
    # stdout:       list of shells (one per line)

    cat <<END_LIST
/bin/bash
/bin/csh
/bin/jsh
/bin/ksh
/bin/ksh93
/bin/pfcsh
/bin/pfksh
/bin/pfsh
/bin/sh
/bin/tcsh
/bin/zsh
END_LIST
}

_get_shells ()
{
    # Returns a list of absolute paths to installed shells.  The shells
    # are validated (it's made sure that they are executable files)
    # before returned.

    # Rationale: OpenBSD and NetBSD can use "getent shells" to get a
    # list of shells, but this doesn't work on Ubuntu.  Solaris is a
    # problem since "getent shells" doesn't work and /etc/shells may not
    # exist.  The list of valid Solaris shells is instead taken from
    # the shells(4) manual on a vanilla Solaris 11.4 system.

    # Parameters:   none
    # stdin:        unused
    # stdout:       list of shells (one per line)

    # Try using "getent shells", if that fails, try parsing /etc/shells,
    # and if that fails, see if we're on Solaris and pass a predifined
    # list of shells.  Else fail.

    if ! getent shells 2>/dev/null &&
       ! grep '^[^#]' /etc/shells 2>/dev/null
    then
        if [ "$( uname -s )" = "SunOS" ]; then
            _get_solaris_shells
        else
            _error 'Can not get list of shells!\n'
            _error 'Please file a bug report at\n'
            _error '@PACKAGE_BUGREPORT@\n'
            exit 1
        fi
    fi |
    while read -r realshell; do
        if [ -x "$realshell" ]; then
            printf '%s\n' "$realshell"
        fi
    done
}

_exit_handler () {
    if [ "$keep" -eq 1 ]; then
        printf 'Leaving %s in place\n' "$tmpwd" >&2
    else
        printf 'Removing %s\n' "$tmpwd" >&2
        cd / && rm -rf -- "$tmpwd"
    fi
}

_usr1_handler () { keep=1; }

force=0 # when 1, bypasses the call to _get_shells
keep=0  # when 1, does not remove working directory when exiting
while getopts 'd:fks:v' opt; do
    case "$opt" in
        d) tmpwd=$OPTARG
           keep=1       ;;
        f) force=1      ;;
        k) keep=1       ;;
        s) skel=$OPTARG ;;
        v) printf 'shell: part of %s (release "%s")\n' \
                "@PACKAGE_NAME@" "@PACKAGE_VERSION@"
           printf 'For bug reports, see %s\n' "@PACKAGE_BUGREPORT@"
           exit 0 ;;
        *) _error 'error while parsing the command line\n'
           exit 1
    esac
done
shift "$(( OPTIND - 1 ))"

if [ -n "$tmpwd" ] && [ -n "$skel" ]; then
    _error 'Can not use both the -d and the -s option at the same time\n'
    exit 1
fi

if [ -n "$1" ]; then
    shell="$1"
    shift
else
    shell="$SHELL"
fi

if [ -z "$shell" ]; then
    _error 'Can not determine what shell to start\n'
    exit 1
fi

if [ "$force" -eq 0 ]; then
    # Get the absolute path to a real shell.  If multiple shells are
    # returned from _get_shells, we will use the first one.
    realshell="$( _get_shells | sed -n '\#/'"${shell##*/}"'$#{p;q;}' )"

    if [ -z "$realshell" ]; then
        _error 'No such shell: %s\n' "$shell"
        echo 'Valid shells:' >&2
        _get_shells | awk '{ printf("\t%s\n", $0) }' >&2
        exit 1
    fi
elif [ ! -x "$shell" ]; then
        _error 'No such executable: %s\n' "$shell"
        exit 1
else
    realshell="$shell"
fi

if [ -z "$tmpwd" ]; then
    template="shell-${shell##*/}$MKTEMP_TEMPLATE"
    tmpwd="$( "$MKTEMP" -d -t "$template" )"
elif [ ! -d "$tmpwd" ]; then
    if [ -e "$tmpwd" ]; then
        _error '"%s" exists, but is not a directory\n' "$tmpwd"
        exit 1
    fi

    if ! mkdir -p "$tmpwd"; then
        _error 'Failed to create directory "%s"\n' "$tmpwd"
        exit 1
    fi
fi

trap _exit_handler EXIT
trap _usr1_handler USR1

if [ -n "$skel" ]; then
    if [ ! -d "$skel" ]; then
        _error 'The -s option was used, but "%s" does not exist\n' "$skel"
        exit 1
    fi

    printf 'Copying %s into %s\n' "$skel" "$tmpwd" >&2
    if command -v pax >/dev/null 2>&1; then
        ( cd -- "$skel" && pax -rw -p p . "$tmpwd" )
    elif command -v tar >/dev/null 2>&1; then
        tar -c -f - -C "$skel" . | tar -x -p -f - -C "$tmpwd"
    else
        _error 'Can not use pax nor tar to copy "%s" to "%s"\n' "$skel" "$tmpwd"
        exit 1
    fi
fi

printf 'Starting %s in %s\n' "$realshell" "$tmpwd" >&2

cd -- "$tmpwd" &&
env -i  HOME="$tmpwd" \
        PATH="$( getconf PATH )" \
        PS1='$ ' \
        SHELL="$realshell" \
        TERM="$TERM" \
        "$realshell" "$@"


# vim: ft=sh
